Внутренняя концепция тезисно:

Для заказчика
- Пользователь заказчик оставляет заявку(request) указывая группу(об этом ниже). Например изучение программирования. 
- Сущность request выступает шаблоном для сущности объекта заявки request_object, который содержит опредленные теги(об этом ниже). Например изучение Java, изучение Docker 
То есть заяка выглядит как : Изучение программирования, это request 
 содержит в себе изучение Java, изучение Docker это два разных request_object, две задачи

- Получется, для пользователя - заказчика, существует общая заявка - глобальная цель(request) и спиcок задачач(request object)
- Этот спиок подзадач в рамках больщой задачи изменяем, можно удалять, изменять ... CRUD, предусматриватеся такой функционал в системе
- Заказчик нанимает исполнителя для решения всей задачи вместе со всеми подзадачами или же для решения каких то определнных подзадач, об этом они договорятся, после того как заказчик примет отклик, 
    в случае, если они договрятся о подзадачах заказчик удаляет подзадачи из общей задачи

- Предполагается, что в ситему уже может быть загружен список откликов(курсов) от исполнителей, и заказчик может просматривать их еще до того, как оставил заявку
- Заказчик может использовать поиск по гурппе или тегу для нахождения нужного курса(отклика)
- В случае, если заказчик сразу нашел, что ему нужно, переходим к этапу заключение договора.
- Если заказчик не стал просматривать список загурежнных (откликов)курсов или посчитал, что его потребности уникальны, он создает заявку, список подзадач и начинается основной процесс

Для исполнителя
- Подрядчик может сразу добавить информацию о отклике(курсе) на платформу, тогда он добавится в общий список и заказчик может сразу его увидеть, если воспользуется поиском
- Подрядчику доступен поиск заявки по гурппам и тегам. 
- В случае, если подрядчик нашел, интересующий его заказ, он может оставить отклик(response) на заявку(request), с указанием конкретных решений(курсов)response_object.
- Отклик reposne является откликом к request, и содержит в себе конкретные решения (response_object)
То есть подрядчик оставляет отклик и может указывать различные варинты исполнения(response_object)
К примру выше: 
    Исполниель оставил отклик на заявку изучние программтрования и указал три варинта(response_object)
    - Обучение Java и Docker со своей точной ценой
    - Обучение Java со своей точной ценой
    - Обучение Docker со своей точной ценой

Предполагается, что закзчик может указывать приблизительную стоимость, на которую он рассчитывает    



СПРАВОЧНИКИ

Примеры групп для request/response object
Например
- языковые
- изучение ПО
- программирование
- ведение бизнеса
- аналитика

Сущность Группа
- Идентификатор
- Название 
- Описание
- Создан пользователем или вшитый в систему
- Идентификатор пользователя добавившего запись
- Дата добавления записи 
- Дата удаления записи

Каждый response_object может иметь несколько тегов(маркеры внутри группы), например reposne_object по изучению основ DevOps может включать тег Git, Docker, Kubernates
Для связи многие ко многим нужна Сущность ReposneObjectТег

Сущность теги содержит атрибуты
- Идентификатор
- Название
- Создан пользователем или вшитый в систему
- Идентификатор пользователя добавившего запись

Сущность response_object/tag - свзяь многие ко многим
- Идентификатор тега
- Идентификатор объекта отклика


Сущность request_object/tag - свзяь многие ко многим
- Идентификатор тега
- Идентификатор объекта заявки

Примеры тегов по группам:
1)Программирование 
- Go
- C# 
- Java
- Основы DevOps
- Docker
- Kubernates
- Базовый курс
- Самый популярный
- ..
- Другое

2) Аналитика
- Аналитика бизнесс процессов
- Аналитика данных в области менеджмента
- Аналитика рабочей коллектива(короче обстановка в компании)
- ...
- Другое

3) Изучение ПО
- Microsoft Office
- 1С Бухголтирия
- ...
- Другое

В качестве реузльтата соглашения сделки, создаем сущность "соглашение"
содержит
- Идентификатор
- Идентификатор заявки
- Идентификатор оъекта отклика
- Сроки выполнения
- Дата создания запсии 
- Дата удаления записи


Получается, что в сущности request_object необходима ссылка на соглашение, если request_object не выполнен, то там стоит null


Можно еще в системе вести рейтинги подрядчиков и заказчиков. 
Чтобы подрядчик мог написать отзыв на заказчика и наоборот

Сущность ОтзывЗаказчика
- Идентификатор
- Идентификатор заказчика
- Идентификатор подрядчика 
- Отзыв 
- Оценка
- Дата добавления записи
- Дата удаления записи

Сущность ОтзывПодрядчика
- Идентификатор
- Идентификатор подрядчика
- Идентификатор заказчика 
- Отзыв 
- Оценка
- Дата добавления записи
- Дата удаления записи


На фронте нужно будет подумать, как отображать договор об исполнении услуг. 
Заполняемые поля догвора должны генерится на беке и быть сущность 'Договор об оказании услуг' причем, наверное договры должны лежать в личных кабинетах пользователей